import {
  to = segment_reverse_etl_model.id-s7Cx3e3hhCazKXF3Cyer84
  id = "s7Cx3e3hhCazKXF3Cyer84"
}

resource "segment_reverse_etl_model" "id-s7Cx3e3hhCazKXF3Cyer84" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "Linked Audience rETL Model"
  query                   = "WITH ID_GRAPH AS (\n\tSELECT \n\t\t\"CANONICAL_SEGMENT_ID\", \n\t\t\"SEGMENT_ID\"\n\tFROM \"SISING_SANDBOX\".\"SEGMENT_PROFILE_SYNC\".\"PROFILE_MERGES\"\n), EXTERNAL_ID_MAPPING AS (\n\tSELECT\n\t\tids.\"CANONICAL_SEGMENT_ID\" as \"CANONICAL_SEGMENT_ID\", \n\t\t\"TYPE\" as \"EXTERNAL_ID_TYPE\",\n\t\t\"VALUE\" as \"EXTERNAL_ID_VALUE\"\n\tFROM \"SISING_SANDBOX\".\"SEGMENT_PROFILE_SYNC\".\"USER_IDENTIFIERS\" AS ids\n\tINNER JOIN ID_GRAPH AS ig\n\t\tON ig.\"CANONICAL_SEGMENT_ID\" = ids.\"CANONICAL_SEGMENT_ID\"\n\tWHERE \"TYPE\" IN ('android.idfa','email','ios.idfa','user_id')\n), PROFILE_TRAITS AS (\n\tSELECT \n\t\tsids.\"CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\",\n\t\tMAX(tra.\"email\") AS \"email\"\n\tFROM EXTERNAL_ID_MAPPING sids\n\tLEFT JOIN (\n\t\tSELECT \n\t\t\ttraits.\"CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\",\n\t\t\tCASE WHEN \"NAME\" = 'email' THEN traits.\"VALUE\" END AS \"email\"\n\t\tFROM \"SISING_SANDBOX\".\"SEGMENT_PROFILE_SYNC\".\"USER_TRAITS\" AS traits\n\t\tWHERE FALSE \n\t\t\t OR (traits.\"NAME\" = 'email' AND traits.\"VALUE\" IS NOT NULL)\n\t) tra\n\tON sids.\"CANONICAL_SEGMENT_ID\" = tra.\"CANONICAL_SEGMENT_ID\"\n\tWHERE sids.\"EXTERNAL_ID_TYPE\" IN ('android.idfa','email','ios.idfa','user_id')\n\tGROUP BY sids.\"CANONICAL_SEGMENT_ID\"\n), ECG_1 AS (\n\tWITH filtered_query AS (\n\t\tSELECT A.\"CANONICAL_SEGMENT_ID\" AS \"A_CANONICAL_SEGMENT_ID\", B.\"USER_ID\" AS \"B_USER_ID\"\n\t\tFROM \"SISING_SANDBOX\".\"LINKED_WORKSHOP_SIMRAN\".\"ACCOUNT\" B\n\t\tINNER JOIN EXTERNAL_ID_MAPPING A ON A.\"EXTERNAL_ID_TYPE\" = 'user_id' AND A.\"EXTERNAL_ID_VALUE\" = CAST(B.\"USER_ID\" AS VARCHAR)\n\t)\n\tSELECT * FROM filtered_query\n), ECG_1_SEGMENT_ID AS (\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\" FROM ECG_1 GROUP BY \"A_CANONICAL_SEGMENT_ID\"\n), PROFILE_FILTER AS (\n\tSELECT \"CANONICAL_SEGMENT_ID\" FROM PROFILE_TRAITS PT\n\tWHERE ((\"CANONICAL_SEGMENT_ID\" IN (SELECT \"CANONICAL_SEGMENT_ID\" FROM ECG_1_SEGMENT_ID)) or (PT.\"email\" IS NOT NULL))\n), ECG_1_FILTERED AS (\n\tSELECT * FROM ECG_1 ECG INNER JOIN PROFILE_FILTER PF ON ECG.\"A_CANONICAL_SEGMENT_ID\" = PF.\"CANONICAL_SEGMENT_ID\"\n)\nSELECT DISTINCT * FROM (\n\tSELECT \"CANONICAL_SEGMENT_ID\" as \"MATCHID\", \"CANONICAL_SEGMENT_ID\"\n\tFROM PROFILE_FILTER\n\tUNION ALL\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" || ':' ||  '1' || ':' || REPLACE(CAST(\"B_USER_ID\" AS VARCHAR), ':', '::') as \"MATCHID\", \"A_CANONICAL_SEGMENT_ID\" as CANONICAL_SEGMENT_ID\n\tFROM ECG_1_FILTERED WHERE \"B_USER_ID\" IS NOT NULL\n) AS DEDUPED_PROJECTIONS"
  query_identifier_column = "matchId"
  source_id               = "toMuunXPwvbTgDRsvF5a3"
}